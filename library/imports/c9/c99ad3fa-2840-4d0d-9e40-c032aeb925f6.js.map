{"version":3,"sources":["../../../../../assets/Script/managers/assets/Script/managers/ResourceManager.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;;GAKG;AACG,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAyB,CAAC;AAG1C;IADA;QAKI,OAAO;QACC,aAAQ,GAAW,EAAE,CAAC;IAkClC,CAAC;wBAvCoB,eAAe;IAMlB,2BAAW,GAAzB;QACI,IAAG,CAAC,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,SAAS,GAAG,IAAI,iBAAe,EAAE,CAAC;SAC1C;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IACD;;;;OAIG;IACI,2CAAiB,GAAxB,UAAyB,GAAW,EAAC,IAAS;QAA9C,iBAeC;QAdG,IAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACpB,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAC,MAAM;gBAC9B,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAC,IAAI,EAAC,UAAC,GAAG,EAAC,GAAG;oBAC/B,IAAG,GAAG,EAAE;wBACJ,MAAM,EAAE,CAAC;qBACZ;oBACD,UAAU;oBACV,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;oBACzB,OAAO,CAAC,GAAG,CAAC,CAAC;gBAEjB,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAC;SACN;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IACM,6CAAmB,GAA1B,UAA2B,GAAW;QAClC,IAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACnB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;SAC7B;IACL,CAAC;;IAnCD,eAAe;IACA,yBAAS,GAAoB,IAAI,CAAC;IAHhC,eAAe;QADnC,OAAO;OACa,eAAe,CAuCnC;IAAD,sBAAC;CAvCD,AAuCC,IAAA;kBAvCoB,eAAe","file":"","sourceRoot":"../../../../../assets/Script/managers","sourcesContent":["/*\n * @Author: mikey.zhaopeng \n * @Date: 2020-02-26 13:31:55 \n * @Last Modified by: mikey.zhaopeng\n * @Last Modified time: 2020-02-26 16:38:26\n */\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ResourceManager {\n\n    // onLoad () {}\n    private static _instance: ResourceManager = null;\n    // 资源缓存\n    private resCache: Object = {};\n    public static getInstance(): ResourceManager {\n        if(!this._instance) {\n            this._instance = new ResourceManager();\n        }\n        return this._instance;\n    }\n    /**\n     * 加载资源对象\n     * @param  {string} url resources 路径下的资源路径字符串\n     * @returns Promise 返回的promise对象\n     */\n    public loadResourceByUrl(url: string,type: any): Promise<any> {\n        if(!this.resCache[url]) {\n            return new Promise((resolve,reject) => {\n                cc.loader.loadRes(url,type,(err,res) => {\n                    if(err) {\n                        reject();\n                    }\n                    // 加入到缓存列表\n                    this.resCache[url] = res;\n                    resolve(res);\n                    \n                })\n            });\n        }\n        return this.resCache[url];\n    }\n    public removeResourceByUrl(url: string): void {\n        if(this.resCache[url]) {\n            this.resCache[url] = null;\n        }\n    }\n\n}\n"]}