{"version":3,"sources":["EventManager.ts"],"names":[],"mappings":";;;;;;AAAA,aAAa;AACb;IAEI;QAIQ,gBAAW,GAAG,EAAE,CAAC;IAFzB,CAAC;IAGa,wBAAW,GAAzB;QACI,IAAG,CAAC,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,SAAS,GAAG,IAAI,YAAY,EAAE,CAAC;SACvC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IACD,SAAS;IACF,uCAAgB,GAAvB,UAAwB,IAAY,EAAC,OAAiB,EAAC,MAAW;QAC9D,IAAG,OAAO,IAAI,KAAK,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;YAC1D,wBAAwB;YACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAG,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,WAAW,EAAE;gBAC9C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aACtC;iBAAM;gBACH,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACxC;SACJ;IACL,CAAC;IACD,UAAU;IACH,0CAAmB,GAA1B,UAA2B,IAAY,EAAC,OAAiB,EAAC,MAAW;QACjE,IAAG,OAAO,IAAI,KAAK,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;YAC1D,OAAO;SACV;QACD,IAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5D,KAAI,IAAI,CAAC,GAAG,CAAC,EAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC7D,IAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;oBACrC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;oBACjC,MAAM;iBACT;aACJ;YACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;YACnC,+BAA+B;SAClC;IACL,CAAC;IACM,oCAAa,GAApB,UAAqB,KAAU;QAC3B,IAAG,CAAC,KAAK,CAAC,MAAM,EAAE;YACd,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;SAC9B;QACD,IAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACxC,IAAI,OAAO,GAAW,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;YAC1D,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC5C,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACrC,IAAG,OAAO,QAAQ,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;oBAClC,yCAAyC;oBACzC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAC,KAAK,CAAC,CAAC;iBACxC;aACJ;SACJ;IACL,CAAC;IAlDa,sBAAS,GAAiB,IAAI,CAAC;IAmDjD,mBAAC;CAxDD,AAwDC,IAAA;kBAxDoB,YAAY","file":"","sourceRoot":"../../../../../assets/Script/managers","sourcesContent":["// 事件监听类（自定义）\r\nexport default class EventManager {\r\n    private target: any;\r\n    constructor() {\r\n\r\n    }\r\n    public static _instance: EventManager = null;\r\n    private listenerObj = {};\r\n    public static getInstance(): EventManager {\r\n        if(!this._instance) {\r\n            this._instance = new EventManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n    // 添加一个监听\r\n    public addEventListener(type: string,handler: Function,target: any) {\r\n        if(typeof type === \"string\" && typeof handler === \"function\") {\r\n            // handler.bind(target);\r\n            this.target = target;\r\n            if(typeof this.listenerObj[type] === \"undefined\") {\r\n                this.listenerObj[type] = [handler];\r\n            } else {\r\n                this.listenerObj[type].push(handler);\r\n            }\r\n        }\r\n    }\r\n    // 删除对应的监听\r\n    public removeEventListener(type: string,handler: Function,target: any) {\r\n        if(typeof type !== \"string\" && typeof handler !== \"function\") {\r\n            return;\r\n        }\r\n        if(this.listenerObj[type] && this.listenerObj[type].length > 0) {\r\n            for(var i = 0,len = this.listenerObj[type].length; i < len; i++) {\r\n                if(this.listenerObj[type][i] == handler) {\r\n                    this.listenerObj[type][i] = null;\r\n                    break;\r\n                }\r\n            }\r\n            this.listenerObj[type].splice(i,1);\r\n            // this.listenerObj[type] = [];\r\n        }\r\n    }\r\n    public dispatchEvent(event: any) {\r\n        if(!event.target) {\r\n            event.target = this.target;\r\n        }\r\n        if(this.listenerObj[event.type].length > 0) {\r\n            let typeLen: number = this.listenerObj[event.type].length;\r\n            let handlers = this.listenerObj[event.type];\r\n            for(let i = 0; i < handlers.length; i++) {\r\n                if(typeof handlers[i] === \"function\") {\r\n                    // handlers[i](event).bind(event.target);\r\n                    handlers[i].call(event.target,event);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"]}